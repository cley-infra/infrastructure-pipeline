name: Security Scan & Dispatch Pipeline

on:
  repository_dispatch:
    types: [iac-deploy]

env:
  # Cortex secrets
  CORTEX_API_KEY: ${{ secrets.CORTEX_API_KEY }}
  CORTEX_API_KEY_ID: ${{ secrets.CORTEX_API_KEY_ID }}
  CORTEX_API_URL: ${{ secrets.CORTEX_API_URL }}
  # GitHub token for dispatch
  GH_TOKEN: ${{ secrets.GH_PAT }}

jobs:
  cortex-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout IaC Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repo }}
          ref: ${{ github.event.client_payload.ref }}
          token: ${{ secrets.GH_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Verify Node.js Version
        run: node -v

      - name: Download Cortex CLI
        run: |
          set -x
          crtx_resp=$(curl "${CORTEX_API_URL}/public_api/v1/unified-cli/releases/download-link?os=linux&architecture=amd64" \
            -H "x-xdr-auth-id: ${CORTEX_API_KEY_ID}" \
            -H "Authorization: ${CORTEX_API_KEY}")
          crtx_url=$(echo $crtx_resp | jq -r ".signed_url")
          curl -o cortexcli $crtx_url
          chmod +x cortexcli
          ./cortexcli --version

      - name: Run Cortex CLI Code Scan
        run: |
          ./cortexcli \
            --api-base-url "${CORTEX_API_URL}" \
            --api-key "${CORTEX_API_KEY}" \
            --api-key-id "${CORTEX_API_KEY_ID}" \
            code scan \
            --directory "${{github.workspace}}" \
            --repo-id "${{ github.event.client_payload.repo }}" \
            --branch "${{ github.event.client_payload.ref }}" \
            --source "GITHUB_ACTIONS" \
            --create-repo-if-missing

  deploy:
    needs: cortex-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout IaC repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repo }}
          ref: ${{ github.event.client_payload.ref }}
          token: ${{ secrets.GH_PAT }}

      # AWS Deploy
      - name: Deploy to AWS
        if: ${{ github.event.client_payload.cloud == 'aws' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ github.event.client_payload.aws_region }}
        run: |
          echo "Deploying to AWS region: $AWS_REGION"
          terraform init
          terraform apply -auto-approve

      # Azure Deploy
      - name: Deploy to Azure
        if: ${{ github.event.client_payload.cloud == 'azure' }}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          terraform init
          terraform apply -auto-approve

      # GCP Deploy
      - name: Deploy to GCP
        if: ${{ github.event.client_payload.cloud == 'gcp' }}
        env:
          GCP_WIP: ${{ secrets.GCP_WIP }}
          GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          terraform init
          terraform apply -auto-approve